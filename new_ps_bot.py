import asyncio
import logging
import aiohttp
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
from aiogram.client.default import DefaultBotProperties

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway.")
if not OPENROUTER_API_KEY:
    raise ValueError("‚ùå OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")

print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
print("BOT_TOKEN –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å:", BOT_TOKEN[:10])  # –ü–æ–∫–∞–∂–∏ —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())


# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞
user_languages = {}

# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
language_kb = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="“ö–∞–∑–∞“õ—à–∞ üá∞üáø", callback_data="lang_kz"),
        InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="lang_ru")
    ]
])

@dp.message(CommandStart())
async def start_handler(message: Message):
    await message.answer("–¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=language_kb)

@dp.callback_query(F.data.startswith("lang_"))
async def handle_language(callback: CallbackQuery):
    user_id = callback.from_user.id
    lang_code = callback.data.split("_")[1]
    user_languages[user_id] = lang_code

    if lang_code == "kz":
        await callback.message.answer("–°”ô–ª–µ–º! –ú–µ–Ω —Å–µ–Ω—ñ“£ –ø—Å–∏—Ö–æ–ª–æ–≥-–¥–æ—Å—ã“£–º—ã–Ω ü§ó –ñ–∞—Å—ã“£–¥—ã –∂–∞–∑—ã–ø, –º–∞–∑–∞–ª–∞“ì–∞–Ω –æ–π—ã“£–º–µ–Ω –±”©–ª—ñ—Å.")
    else:
        await callback.message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥ ü§ó –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç –∏ —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —É —Ç–µ–±—è –Ω–∞ –¥—É—à–µ.")

    await callback.answer()

async def ask_openrouter(prompt, age, lang):
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://example.com",
        "X-Title": "ChildPsychBot"
    }

    if lang == "kz":
        system_prompt = (
            "–°–µ–Ω ‚Äî “õ–∞–º“õ–æ—Ä ”ô—Ä—ñ –º–µ–π—ñ—Ä—ñ–º–¥—ñ –±–∞–ª–∞–ª–∞—Ä –ø—Å–∏—Ö–æ–ª–æ–≥—ã—Å—ã“£. "
            "–°–µ–Ω—ñ“£ –º–∞“õ—Å–∞—Ç—ã“£ ‚Äî 6-–¥–∞–Ω 18 –∂–∞—Å“õ–∞ –¥–µ–π—ñ–Ω–≥—ñ –±–∞–ª–∞–ª–∞—Ä“ì–∞ –æ–ª–∞—Ä–¥—ã“£ —É–∞–π—ã–º–¥–∞—Ä—ã –º–µ–Ω —Å“±—Ä–∞“õ—Ç–∞—Ä—ã–Ω–¥–∞ –∫”©–º–µ–∫ –±–µ—Ä—É. "
            "–ë–∞—Ä–ª—ã“ì—ã–Ω “õ–∞—Ä–∞–ø–∞–π—ã–º —Ç—ñ–ª–º–µ–Ω —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä, –º—ã—Å–∞–ª –∫–µ–ª—Ç—ñ—Ä, “õ–æ–ª–¥–∞—É –∫”©—Ä—Å–µ—Ç, —à–∞–±—ã—Ç—Ç–∞–Ω–¥—ã—Ä, –±—ñ—Ä–∞“õ –µ—à“õ–∞—à–∞–Ω “õ–æ—Ä“õ—ã—Ç–ø–∞. "
            "–°–µ–Ω ”©—Ç–µ –¥–æ—Å—Ç—ã“õ –ø–µ–π—ñ–ª–¥—ñ, –∂“±–º—Å–∞“õ –∂”ô–Ω–µ —Ç“Ø—Å—ñ–Ω—ñ–∫—Ç—ñ –±–æ–ª—É—ã“£ –∫–µ—Ä–µ–∫. "
            "–°–µ–Ω –∂–∞—Å–∞–Ω–¥—ã –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –µ–º–µ—Å—Å—ñ“£ –¥–µ–ø –∂–∞—É–∞–ø –±–µ—Ä. "
            f"–°–µ–Ω {age} –∂–∞—Å—Ç–∞“ì—ã –±–∞–ª–∞–º–µ–Ω “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω–¥–µ —Å”©–π–ª–µ—Å—ñ–ø —Ç“±—Ä—Å—ã“£."
        )
    else:
        system_prompt = (
            "–¢—ã ‚Äî –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –∏ –¥–æ–±—Ä—ã–π –¥–µ—Ç—Å–∫–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥. "
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –¥–µ—Ç—è–º –æ—Ç 6 –¥–æ 18 –ª–µ—Ç —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å –∏—Ö –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º–∏. "
            "–û–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –≤–¥–æ—Ö–Ω–æ–≤–ª—è–π, –Ω–µ –ø—É–≥–∞–π. "
            "–ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, –º—è–≥–∫–∏–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º. "
            "–ù–µ –≥–æ–≤–æ—Ä–∏, —á—Ç–æ —Ç—ã –ò–ò. "
            f"–¢—ã –æ–±—â–∞–µ—à—å—Å—è —Å —Ä–µ–±—ë–Ω–∫–æ–º {age} –ª–µ—Ç ‚Äî –∞–¥–∞–ø—Ç–∏—Ä—É–π —Å—Ç–∏–ª—å –ø–æ–¥ –µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç."
        )

    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": prompt}
    ]

    json_data = {
        "model": "openai/gpt-4-turbo",
        "messages": messages
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=json_data) as resp:
            data = await resp.json()
            return data["choices"][0]["message"]["content"]

@dp.message()
async def handle_message(message: Message):
    user_id = message.from_user.id
    lang = user_languages.get(user_id, "ru")

    text = message.text.strip()
    age = 10
    for word in text.split():
        if word.isdigit() and 3 <= int(word) <= 18:
            age = int(word)
            break

    reply = await ask_openrouter(text, age, lang)
    await message.answer(reply)

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
